<?php declare(strict_types=1);

/* Copyright (c) 1998-2020 ILIAS open source, Extended GPL, see docs/LICENSE */

use ILIAS\DI\HTTPServices;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ServerRequestInterface;

require_once __DIR__ . '/../vendor/autoload.php';

/**
 * Class ilSkinChangerUIHookGUI
 * @author            Marvin Beym <mbeym@databay.de>
 * @ilCtrl_isCalledBy ilSkinChangerUIHookGUI: ilUIPluginRouterGUI
 */
class ilSkinChangerUIHookGUI extends ilUIHookPluginGUI
{
    protected ilCtrl $ctrl;
    protected ilObjUser $user;
    protected HTTPServices $http;
    /**
     * @var RequestInterface|ServerRequestInterface
     */
    protected $request;
    protected ?ilSkinChangerPlugin $plugin;

    /**
     * ilRepositoryResubmissionUIHookGUI constructor.
     */
    public function __construct()
    {
        global $DIC;
        $this->ctrl = $DIC->ctrl();
        $this->user = $DIC->user();
        $this->http = $DIC->http();
        $this->request = $DIC->http()->request();
        $this->plugin = new ilSkinChangerPlugin();
    }

    /** @inheritDoc */
    public function checkGotoHook($a_target) : array
    {
        $pluginCommand = "skinChangeThroughLink";
        if ($a_target == $pluginCommand) {
            $this->ctrl->setTargetScript('ilias.php');
            $url = $this->ctrl->getLinkTargetByClass(
                [ilUIPluginRouterGUI::class, self::class],
                $pluginCommand
            );

            $query = parse_url($url, PHP_URL_QUERY);
            if (is_string($query)) {
                $parameters = [];
                parse_str($query, $parameters);
                if (!is_array($parameters) || !isset($parameters['baseClass'])) {
                    $url = ilUtil::appendUrlParameterString($url, 'baseClass=' . ilUIPluginRouterGUI::class);
                }
            }

            foreach ($this->request->getQueryParams() as $key => $queryParam) {
                if (in_array($key, ["target"])) {
                    continue;
                }
                $url = ilUtil::appendUrlParameterString($url, "{$key}={$queryParam}");
            }

            $this->ctrl->redirectToURL($url);
        }

        return parent::checkGotoHook($a_target); // TODO: Change the autogenerated stub
    }

    public function skinChangeAnonymous() : void
    {
        $skinData = $this->getSkinData();

        if (!$skinData) {
            ilUtil::sendFailure($this->plugin->txt("requestedSkinNotFound"), true);
            $this->redirectToDashboard();
        }

        $skinId = $skinData["skinId"];
        $styleId = $skinData["styleId"];

        $this->ctrl->redirectToURL("login.php?cmd=force_login&anonSkinId=$skinId&anonStyleId=$styleId");
    }

    /**
     * @return null|string[]
     */
    private function getSkinData() : ?array
    {
        $skinId = $this->request->getQueryParams()["skin"];
        $styleId = "";

        if (!$skinId) {
            ilUtil::sendFailure($this->plugin->txt("skinParameterMissingInUrl"), true);
            $this->redirectToDashboard();
        }

        $foundSkin = false;
        try {
            foreach (ilStyleDefinition::getAllSkinStyles() as $skinStyle) {
                if ($skinId === $skinStyle["skin_id"]) {
                    $foundSkin = true;
                    $styleId = $skinStyle["style_id"];
                    break;
                }
            }
        } catch (Exception $ex) {
            return null;
        }

        if (!$foundSkin) {
            return null;
        }

        return [
            "skinId" => $skinId,
            "styleId" => $styleId,
        ];
    }

    /**
     * @return void
     */
    public function skinChangeThroughLink() : void
    {
        $skinData = $this->getSkinData();

        if (!$skinData) {
            ilUtil::sendFailure($this->plugin->txt("requestedSkinNotFound"), true);
            $this->redirectToDashboard();
        }

        $skinId = $skinData["skinId"];
        $styleId = $skinData["styleId"];

        if ($this->user->getPref("skinOverride") != $skinId) {
            $this->user->setPref("skinOverride", $skinId);
            $this->user->writePrefs();
            $this->plugin->setUserSkin($this->user, $skinId, $styleId);
        }

        $this->redirectToDashboard();
    }

    /**
     * Executes the requested command.
     * @return void
     */
    public function executeCommand()
    {
        if (!isset($this->request->getQueryParams()["cmd"])) {
            ilUtil::sendFailure($this->plugin->txt("cmdNotFound"), true);
            $this->redirectToDashboard();
        }

        $cmd = $this->request->getQueryParams()["cmd"];

        if ($this->user->isAnonymous()) {
            $additionalParameters = '';

            $target = ilUtil::stripSlashes((string) ($this->http->request()->getQueryParams()['target'] ?? ''));
            if (strlen($target) > 0) {
                $additionalParameters .= '&target=' . $target;
            }

            if (!(bool) ilSkinChangerPlugin::getInstance()->settings->get("enableAnonSkinChange")) {
                if (defined('CLIENT_ID')) {
                    $additionalParameters .= '&client_id=' . CLIENT_ID;
                }
                $this->ctrl->redirectToURL('login.php?cmd=force_login' . $additionalParameters);
            }

            $cmd = "skinChangeAnonymous";
        }

        $this->performCommand($cmd);
    }

    /**
     * Calls the function for a received command
     * @param $cmd
     * @return void
     */
    public function performCommand($cmd)
    {
        switch (true) {
            case method_exists($this, $cmd):
                $this->{$cmd}();
                break;
        }
    }

    public function getHTML($a_comp, $a_part, $a_par = array()) : array
    {
        $tplId = $a_par["tpl_id"];
        $html = $a_par["html"];

        if (!(bool) ilSkinChangerPlugin::getInstance()->settings->get("enableAnonSkinChange")) {
            return $this->uiHookResponse();
        }

        if ($tplId !== "src/UI/templates/default/Layout/tpl.standardpage.html" || !$html || $a_part !== "template_get") {
            return $this->uiHookResponse();
        }

        $query = $this->request->getQueryParams();
        if (!isset($query["anonSkinId"], $query["anonStyleId"])) {
            return $this->uiHookResponse();
        }

        $skinId = $query["anonSkinId"];
        $styleId = $query["anonStyleId"];

        $match = [];
        if (!preg_match(
            '/\/skin.+\/(.+\.css)|default\/(delos\.css)/m',
            $html,
            $match
        ) || !$match || count($match) < 2) {
            return $this->uiHookResponse();
        }

        try {
            $currentStyle = ilStyleDefinition::getCurrentStyle();
            $currentSkin = ilStyleDefinition::getCurrentSkin();
        } catch (Exception $ex) {
            return $this->uiHookResponse();
        }

        if ($currentSkin === "default") {
            $currentCssPath = "./templates/";
            $newCssPath = "./templates/";
            if ($skinId !== "default") {
                $newCssPath = "./Customizing/global/skin/";
            }
        } else {
            $currentCssPath = "./Customizing/global/skin/";
            $newCssPath = "./Customizing/global/skin/";

            if ($skinId === "default") {
                $newCssPath = "./templates/";
            }
        }
        $currentCssPath .= "$currentSkin/$currentStyle.css";
        $newCssPath .= "$skinId/$styleId.css";

        if ($currentCssPath !== $newCssPath) {
            $html = str_replace($currentCssPath, $newCssPath, $html);
        }

        $html = str_replace(
            "</head>",
            "<script src=\"{$this->plugin->jsFolder("urlCleaner.js")}\"></script></head>",
            $html
        );

        return $this->uiHookResponse(self::REPLACE, $html);
    }

    /** @inheritDoc */
    public function modifyGUI($a_comp, $a_part, $a_par = array())
    {
    }

    /**
     * Redirects the user to the dashboard page
     * @return void
     */
    protected function redirectToDashboard()
    {
        $this->ctrl->redirectByClass(ilDashboardGUI::class, "show");
    }

    /**
     * Returns the array used to replace the html content
     * @param string $mode
     * @param string $html
     * @return string[]
     */
    protected function uiHookResponse(string $mode = ilUIHookPluginGUI::KEEP, string $html = "") : array
    {
        return ['mode' => $mode, 'html' => $html];
    }
}
